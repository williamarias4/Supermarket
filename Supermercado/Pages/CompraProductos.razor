@page "/CompraProductos"
@inject IJSRuntime JsRuntime

@using Supermercado.DAO;
@using Supermercado.Data;
@using System.Data;

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService iLocalStorage

<div class="container">
    <h3>Productos</h3>
    <div class="row">
        <div class="col-12">
            <table class="table table-bordered scroll">
                <thead>
                    <tr>
                        <th scope="col">EAN</th>
                        <th scope="col">Descripcion</th>
                        <th scope="col">Precio</th>
                        <th scope="col">Disponible</th>
                        <th></th>

                    </tr>
                </thead>
                <tbody>

                    @foreach (var producto in productos)
                    {

                        <tr>

                            <td>@producto.ean</td>
                            <td>@producto.descripcion </td>
                            <td>@producto.precio </td>
                            @if (producto.idArea != 4)
                            {
                                <td>@producto.cantidad</td>
                            }
                            else
                            {
                                <td>@producto.cantidad Kg</td>
                            }

                            <td>
                                <input type="text" @bind="@producto.cantidadVendida" />
                                <button type="button" class="btn btn-primary" @onclick="() => mostrarFactura(producto)">Añadir</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>
<div>

    <h4>Carrito de compras</h4>
    <table>
        @foreach (var detalle in factura.detalle)
        {
            <tr>
                <td>
                    <button type="button" class="btn btn-danger" @onclick="() => quitarProducto(detalle)">X</button>
                    Producto: @detalle.descripcion
                    <br />Precio: @detalle.precio
                    <br />Cantidad: @detalle.cantidad
                    <br />SubTotal: @detalle.subtotal
                    <br />-----------------------------------------
                </td>
            </tr>
        }
    <br />Numero Factura: @factura.idFactura
    <br />Numero de Caja: @factura.numeroCaja
    <br />Cajero: @factura.nombreUsuario
    <br />Total a facturar: @factura.total

        <tr>
            <td>
                <button type="button" class="btn btn-success" @onclick="() => facturar()">Facturar</button>
            </td>
        </tr>

    </table>
</div>

@code {

    Factura factura = new Factura();

    List<Producto> productos = new List<Producto>();
    List<Producto> productosCompleta = new List<Producto>();
    string CantidadProducto = "";
    Usuario userSessionValue = new Usuario();

    //lista de prodcutos para la visualizacion del carrito
    List<string> l = new List<string>();

    //lista de cantidades para la compra de productos
    List<int> cantidades = new List<int>() { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

    int cantidad;

    int Cantidad
    {
        get => cantidad;
        set
        {
            cantidad = value;

        }
    }

    private void mostrarFactura(Producto producto)
    {
        factura.detalle.Add(new DetalleFactura()
        {
            descripcion = producto.descripcion,
            ean = producto.ean,
            idArea = producto.idArea,
            subtotal = producto.precio * Int32.Parse(producto.cantidadVendida),
            cantidad = Int32.Parse(producto.cantidadVendida),
            precio = producto.precio,
            id = producto.id
        });
        factura.total += producto.precio * Int32.Parse(producto.cantidadVendida);
        producto.cantidadVendida = "";
    }

    protected override async Task OnInitializedAsync()
    {
        userSessionValue = await iLocalStorage.GetItemAsync<Usuario>("SessionValue");
        iniciarFactura();
    }

    private void facturar()
    {
        if (factura.detalle is not null && factura.detalle.Count > 0)
        {
            CRUD crud = new CRUD();
            crud.agregarLogCajero(factura);
            crud.agregarLogFactura(factura);


            //reiniciar los valores con lo mas actual
            iniciarFactura();
        }
    }

    private void iniciarFactura()
    {
        factura = new Factura();
        factura.detalle = new List<DetalleFactura>();
        string numeroFactura = DateTime.Now.Ticks.ToString();
        factura.idFactura = Int64.Parse(numeroFactura.Substring(numeroFactura.Length - 10));
        factura.numeroCaja = Int32.Parse(userSessionValue.Caja);
        factura.nombreUsuario = userSessionValue.Nombre + " " + userSessionValue.Apellido1 + " " + userSessionValue.Apellido2;
        factura.fecha = DateTime.Now.ToString();
        CRUD crud = new CRUD();
        productos = crud.listarProductosDisponibles();
        productosCompleta = crud.listarProductosDisponibles();
    }

    private void quitarProducto(DetalleFactura detalle)
    {
        factura.detalle.Remove(detalle);
        factura.total -= detalle.subtotal;
    }

}

