@page "/productos"

@using Supermercado.DAO;
@using Supermercado.Data;

@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService iLocalStorage

<div class="container">
    <h3>Productos</h3>
    <div class="row">
        <div class="col-12">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Area</th>
                        <th scope="col">EAN</th>
                        <th scope="col">Descripcion</th>
                        <th scope="col">Precio</th>
                        <th scope="col">Cantidad</th>
                        <th scope="col">PLU</th>
                        <th scope="col">Peso</th>
                        <th scope="col">Accion</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var producto in listarProductos())
                    {
                        <tr>
                            <td>@descripcionAreaPorProducto(producto.idArea)</td>
                            <td>@producto.ean</td>
                            <td>@producto.descripcion</td>
                            <td>@producto.precio</td>
                            <td>@producto.cantidad</td>
                            @if (producto.PLU == 0)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@producto.PLU</td>
                            }
                            @if (producto.Peso == 0)
                            {
                                <td></td>
                            }
                            else
                            {
                                <td>@producto.Peso</td>
                            }
                            <td>
                                <button type="button" class="btn btn-success" @onclick="() => enviarId(producto.id)">Modificar</button>
                                @if (producto.Peso != 0 && producto.PLU != 0)
                                {
                                    <button type="button" class="btn btn-danger" @onclick="() => eliminarProductoFresco(producto.id)">Eliminar</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-danger" @onclick="() => eliminarProducto(producto.id)">Eliminar</button>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    @if (userSessionValue.Rol == null)
    {
        
    }
    else if (userSessionValue.Rol.IdRol == 3)
    {<NavLink href="formularioProducto">
            <button class="btn btn-primary">Crear producto</button>
        </NavLink>
    }
    else { }
</div>

@code {
    Usuario userSessionValue = new Usuario();
    private List<ProductoFresco> listarProductos()
    {
        //Hago la lista de productos
        List<Producto> p = new List<Producto>();
        //Hago la lista de productos frescos
        List<ProductoFresco> f = new List<ProductoFresco>();
        //Hago otra lista deproductos frescos que va a contener ambos (productos y productos frescos pero a los productos les pone un plu, id, y peso de cero
        //entonces hay otra condicion de que si esos atributos son cero entonces muestre en pantalla ""
        List<ProductoFresco> aux = new List<ProductoFresco>();
        //Hago otra lista que va a que recorrer a p y f y me da a decir en que espacios de la lista de p se encuentran los productos que son iguales a f
        List<int> x = new List<int>();
        CRUD crud = new CRUD();
        p = crud.listarProductos();
        f = crud.listarProductosFrescos();
        for (int i = 0; i < p.Count; i++)
        {
            for (int j = 0; j < f.Count; j++)
            {
                if (p[i].id == f[j].id)
                {
                    x.Add(i);
                }
            }
        }
        if (x.Count != 0)
        {
            int z = 0;
            for (int i = 0; i < p.Count; i++)
            {
                if (i != x[z])
                {
                    aux.Add(new ProductoFresco(p[i], 0, 0, 0));
                }
                else
                {
                    aux.Add(f[z]);
                    if (x[z] + 1 < x.Count)
                    {
                        z++;
                    }
                }
            }
        }
        if (x.Count == 0 && p.Count != 0)
        {
            aux.Add(new ProductoFresco(p[0], 0, 0, 0));
        }
        return aux;
    }

    private void eliminarProducto(int id)
    {
        CRUD crud = new CRUD();
        crud.eliminarProducto(id);
    }

    private void eliminarProductoFresco(int id)
    {
        CRUD crud = new CRUD();
        crud.eliminarProductoFresco(id);
        eliminarProducto(id);
    }

    private string descripcionAreaPorProducto(int id)
    {
        CRUD crud = new CRUD();
        string a = crud.areaPorProducto(id).descripcion;
        return a;
    }

    private void enviarId(int id)
    {
        NavigationManager.NavigateTo("modificarProducto/" + id, forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        userSessionValue = await iLocalStorage.GetItemAsync<Usuario>("SessionValue");

    }

}